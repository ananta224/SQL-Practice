Here are 5 SQL query questions that can be solved using multiple approaches (using JOIN, SUBQUERY, CTE, WINDOW FUNCTION, EXISTS, etc.). These are great for practicing different SQL techniques.


---

1. Find employees with the highest salary in each department

❓Question:

> Given a table employees(emp_id, name, salary, dept_id), find the employee(s) with the highest salary in each department.



🧠 Approaches:

Using JOIN (Self-join)

Using CTE with RANK()/DENSE_RANK()

Using Subquery with MAX(salary)



---

2. Find duplicate rows in a table

❓Question:

> In a table students(id, name, class), find all records that have duplicate names and class combinations.



🧠 Approaches:

Using GROUP BY with HAVING count > 1

Using WINDOW function ROW_NUMBER() > 1

Using EXISTS or IN with correlated subquery



---

3. Delete duplicate rows while keeping one

❓Question:

> Given a table orders(order_id, customer_id, order_date), delete duplicate records based on customer_id and order_date, but keep the one with the lowest order_id.



🧠 Approaches:

Using CTE with ROW_NUMBER()

Using NOT IN / NOT EXISTS

Using TEMP table and DISTINCT insert



---

4. Get second highest salary

❓Question:

> From employees(emp_id, name, salary), find the second highest salary.



🧠 Approaches:

Using Subquery with LIMIT/OFFSET

Using CTE with DENSE_RANK()

Using MAX() with WHERE salary < (SELECT MAX(salary)...)



---

5. Retrieve departments with more than 3 employees

❓Question:

> Given employees(emp_id, name, dept_id), return the departments that have more than 3 employees.



🧠 Approaches:

Using GROUP BY with HAVING

Using Subquery with COUNT

Using WINDOW Function COUNT() OVER(PARTITION BY dept_id) and filtering



---

Would you like full SQL query examples for each approach?

Sure! Below are the CREATE TABLE and INSERT INTO statements in SQL for the 5 problems mentioned earlier. You can use this data to practice writing queries using multiple approaches.


---

✅ 1. employees Table

CREATE TABLE employees (
    emp_id INT,
    name VARCHAR(50),
    salary INT,
    dept_id INT
);

INSERT INTO employees VALUES
(1, 'Alice', 80000, 101),
(2, 'Bob', 95000, 101),
(3, 'Charlie', 60000, 102),
(4, 'David', 95000, 101),
(5, 'Eva', 70000, 102),
(6, 'Frank', 85000, 103),
(7, 'Grace', 85000, 103);


---

✅ 2. students Table

CREATE TABLE students (
    id INT,
    name VARCHAR(50),
    class VARCHAR(20)
);

INSERT INTO students VALUES
(1, 'Ravi', '10A'),
(2, 'Ravi', '10A'),
(3, 'Meena', '10B'),
(4, 'John', '10A'),
(5, 'Ravi', '10B'),
(6, 'Meena', '10B');


---

✅ 3. orders Table

CREATE TABLE orders (
    order_id INT,
    customer_id INT,
    order_date DATE
);

INSERT INTO orders VALUES
(1, 101, '2024-06-01'),
(2, 102, '2024-06-02'),
(3, 101, '2024-06-01'),
(4, 103, '2024-06-03'),
(5, 102, '2024-06-02'),
(6, 101, '2024-06-04');


---

✅ 4. Reusing employees Table for Salary Question

Already created above. You can use it for second-highest salary queries.


---

✅ 5. Reusing employees Table for Department Employee Count

Same employees table will be reused to find departments with more than 3 employees.


---

Would you like me to provide full solution queries using different methods for each of the 5 problems too?

